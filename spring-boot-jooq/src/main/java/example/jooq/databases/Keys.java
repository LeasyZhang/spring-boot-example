/*
 * This file is generated by jOOQ.
 */
package example.jooq.databases;


import example.jooq.databases.tables.Account;
import example.jooq.databases.tables.Author;
import example.jooq.databases.tables.Book;
import example.jooq.databases.tables.T;
import example.jooq.databases.tables.T2;
import example.jooq.databases.tables.Weather;
import example.jooq.databases.tables.records.AccountRecord;
import example.jooq.databases.tables.records.AuthorRecord;
import example.jooq.databases.tables.records.BookRecord;
import example.jooq.databases.tables.records.T2Record;
import example.jooq.databases.tables.records.TRecord;
import example.jooq.databases.tables.records.WeatherRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * mydb.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_PRIMARY"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<TRecord> KEY_T_C = Internal.createUniqueKey(T.T, DSL.name("KEY_t_c"), new TableField[] { T.T.C }, true);
    public static final UniqueKey<TRecord> KEY_T_PRIMARY = Internal.createUniqueKey(T.T, DSL.name("KEY_t_PRIMARY"), new TableField[] { T.T.ID }, true);
    public static final UniqueKey<T2Record> KEY_T2_C = Internal.createUniqueKey(T2.T2, DSL.name("KEY_t2_c"), new TableField[] { T2.T2.C }, true);
    public static final UniqueKey<T2Record> KEY_T2_PRIMARY = Internal.createUniqueKey(T2.T2, DSL.name("KEY_t2_PRIMARY"), new TableField[] { T2.T2.ID }, true);
    public static final UniqueKey<WeatherRecord> KEY_WEATHER_PRIMARY = Internal.createUniqueKey(Weather.WEATHER, DSL.name("KEY_weather_PRIMARY"), new TableField[] { Weather.WEATHER.ID }, true);
}
