/*
 * This file is generated by jOOQ.
 */
package example.jooq.databases.tables.records;


import example.jooq.databases.tables.B;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BRecord extends TableRecordImpl<BRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mydb.b.f1</code>.
     */
    public BRecord setF1(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mydb.b.f1</code>.
     */
    public Integer getF1() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>mydb.b.f2</code>.
     */
    public BRecord setF2(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mydb.b.f2</code>.
     */
    public Integer getF2() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return B.B.F1;
    }

    @Override
    public Field<Integer> field2() {
        return B.B.F2;
    }

    @Override
    public Integer component1() {
        return getF1();
    }

    @Override
    public Integer component2() {
        return getF2();
    }

    @Override
    public Integer value1() {
        return getF1();
    }

    @Override
    public Integer value2() {
        return getF2();
    }

    @Override
    public BRecord value1(Integer value) {
        setF1(value);
        return this;
    }

    @Override
    public BRecord value2(Integer value) {
        setF2(value);
        return this;
    }

    @Override
    public BRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BRecord
     */
    public BRecord() {
        super(B.B);
    }

    /**
     * Create a detached, initialised BRecord
     */
    public BRecord(Integer f1, Integer f2) {
        super(B.B);

        setF1(f1);
        setF2(f2);
    }
}
