/*
 * This file is generated by jOOQ.
 */
package example.jooq.databases.tables;


import example.jooq.databases.Indexes;
import example.jooq.databases.Mydb;
import example.jooq.databases.tables.records.ARecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class A extends TableImpl<ARecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydb.a</code>
     */
    public static final A A = new A();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ARecord> getRecordType() {
        return ARecord.class;
    }

    /**
     * The column <code>mydb.a.f1</code>.
     */
    public final TableField<ARecord, Integer> F1 = createField(DSL.name("f1"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mydb.a.f2</code>.
     */
    public final TableField<ARecord, Integer> F2 = createField(DSL.name("f2"), SQLDataType.INTEGER, this, "");

    private A(Name alias, Table<ARecord> aliased) {
        this(alias, aliased, null);
    }

    private A(Name alias, Table<ARecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydb.a</code> table reference
     */
    public A(String alias) {
        this(DSL.name(alias), A);
    }

    /**
     * Create an aliased <code>mydb.a</code> table reference
     */
    public A(Name alias) {
        this(alias, A);
    }

    /**
     * Create a <code>mydb.a</code> table reference
     */
    public A() {
        this(DSL.name("a"), null);
    }

    public <O extends Record> A(Table<O> child, ForeignKey<O, ARecord> key) {
        super(child, key, A);
    }

    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.A_F1);
    }

    @Override
    public A as(String alias) {
        return new A(DSL.name(alias), this);
    }

    @Override
    public A as(Name alias) {
        return new A(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public A rename(String name) {
        return new A(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public A rename(Name name) {
        return new A(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
