/*
 * This file is generated by jOOQ.
*/
package example.jooq.databases.tables;


import example.jooq.databases.Keys;
import example.jooq.databases.Mydb;
import example.jooq.databases.tables.records.TRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class T extends TableImpl<TRecord> {

    private static final long serialVersionUID = -1067327265;

    /**
     * The reference instance of <code>mydb.t</code>
     */
    public static final T T = new T();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRecord> getRecordType() {
        return TRecord.class;
    }

    /**
     * The column <code>mydb.t.id</code>.
     */
    public final TableField<TRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.t.c</code>.
     */
    public final TableField<TRecord, Integer> C = createField("c", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mydb.t.d</code>.
     */
    public final TableField<TRecord, Integer> D = createField("d", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>mydb.t</code> table reference
     */
    public T() {
        this("t", null);
    }

    /**
     * Create an aliased <code>mydb.t</code> table reference
     */
    public T(String alias) {
        this(alias, T);
    }

    private T(String alias, Table<TRecord> aliased) {
        this(alias, aliased, null);
    }

    private T(String alias, Table<TRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRecord> getPrimaryKey() {
        return Keys.KEY_T_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRecord>> getKeys() {
        return Arrays.<UniqueKey<TRecord>>asList(Keys.KEY_T_PRIMARY, Keys.KEY_T_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public T as(String alias) {
        return new T(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public T rename(String name) {
        return new T(name, null);
    }
}
