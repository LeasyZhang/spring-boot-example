/*
 * This file is generated by jOOQ.
*/
package example.jooq.databases.tables;


import example.jooq.databases.Keys;
import example.jooq.databases.Mydb;
import example.jooq.databases.tables.records.T2Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class T2 extends TableImpl<T2Record> {

    private static final long serialVersionUID = -1604293455;

    /**
     * The reference instance of <code>mydb.t2</code>
     */
    public static final T2 T2 = new T2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<T2Record> getRecordType() {
        return T2Record.class;
    }

    /**
     * The column <code>mydb.t2.id</code>.
     */
    public final TableField<T2Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.t2.c</code>.
     */
    public final TableField<T2Record, Integer> C = createField("c", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mydb.t2.d</code>.
     */
    public final TableField<T2Record, Integer> D = createField("d", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>mydb.t2</code> table reference
     */
    public T2() {
        this("t2", null);
    }

    /**
     * Create an aliased <code>mydb.t2</code> table reference
     */
    public T2(String alias) {
        this(alias, T2);
    }

    private T2(String alias, Table<T2Record> aliased) {
        this(alias, aliased, null);
    }

    private T2(String alias, Table<T2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<T2Record, Integer> getIdentity() {
        return Keys.IDENTITY_T2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<T2Record> getPrimaryKey() {
        return Keys.KEY_T2_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<T2Record>> getKeys() {
        return Arrays.<UniqueKey<T2Record>>asList(Keys.KEY_T2_PRIMARY, Keys.KEY_T2_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public T2 as(String alias) {
        return new T2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public T2 rename(String name) {
        return new T2(name, null);
    }
}
